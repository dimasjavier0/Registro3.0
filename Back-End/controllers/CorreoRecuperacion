//======================Prueba, Esperando la tabala usuarios de amrylin========================
//----------------------- Importante----------------------------------
//=====================npm install nodemailer bcrypt==================
const nodemailer = require('nodemailer');
const bcrypt = require('bcrypt');
const crypto = require('crypto');

// Clase para manejar el envío de correos de recuperación de contraseña
class CorreoRecuperacion {
    constructor() {
        // Configuración inicial del correo
        this.mailOptions = {
            from: 'idsunahcu@gmail.com', // La dirección de correo electrónico desde la que se enviarán los correos
            // Las siguientes opciones se establecerán en el método enviarCorreoRecuperacion
            to: '',
            subject: '',
            text: ''
        };

        // Configuración del transportador SMTP con los detalles de tu servicio de correo
        this.transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: 'idsunahcu@gmail.com',
                pass: 'mdmw ielt kdak djdx' 
            },
            tls: {
                rejectUnauthorized: false // Esto debería ser true en producción por seguridad
            }
        });
    }

    // Método para enviar el correo electrónico
    async enviarCorreoRecuperacion(emailDestino, contraseñaProvisional) {
        // Configurar las opciones del correo para la recuperación de contraseña
        this.mailOptions.to = emailDestino;
        this.mailOptions.subject = 'Recuperación de contraseña - UNAH';
        this.mailOptions.text = `Tu contraseña provisional es: ${contraseñaProvisional}. Se te recomienda cambiar esta contraseña después de iniciar sesión.`;

        // Intentar enviar el correo electrónico y capturar el resultado
        try {
            let info = await this.transporter.sendMail(this.mailOptions);
            console.log('Correo enviado: ' + info.response);
            return true;
        } catch (error) {
            console.error('Error al enviar el correo: ', error);
            return false;
        }
    }
}

// Función para generar una contraseña provisional segura
function generarContraseñaProvisional() {
    return crypto.randomBytes(8).toString('hex'); // Genera una cadena hex segura
}

// Función para hashear la contraseña en la base de datos (Revisar si es necesario)

async function hashearContraseña(contraseña) {
    const salt = await bcrypt.genSalt(10); // Genera el salt para el hasheo
    return bcrypt.hash(contraseña, salt); // Devuelve la contraseña hasheada
}



// Función de ejemplo que manejaría la solicitud de recuperación de contraseña de un usuario
async function manejarSolicitudRecuperacion(emailUsuario) {
    const contraseñaProvisional = generarContraseñaProvisional();
    const contraseñaHasheada = await hashearContraseña(contraseñaProvisional);

    // Aquí deberías guardar la `contraseñaHasheada` en la base de datos asociada al usuario
    // Por ejemplo: actualizarUsuario(emailUsuario, contraseñaHasheada);

    const correo = new CorreoRecuperacion();
    const resultadoEnvio = await correo.enviarCorreoRecuperacion(emailUsuario, contraseñaProvisional);

    if (resultadoEnvio) {
        console.log(`Correo de recuperación enviado a ${emailUsuario}.`);
    } else {
        console.log(`Error al enviar el correo de recuperación a ${emailUsuario}.`);
    }
}

// Ejemplo de uso de la función manejarSolicitudRecuperacion
// manejarSolicitudRecuperacion('correo_del_usuario@ejemplo.com');